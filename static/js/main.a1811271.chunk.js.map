{"version":3,"sources":["components/LocationInfo.jsx","utils/api/besttime.js","components/Map.jsx","App.js","index.js"],"names":["LocationInfo","isOpen","onClose","onOpen","locationAddress","locationName","bestTimeData","LocationModal","styled","Box","width","height","background","outline","marginTop","marginLeft","display","alignItems","textAlign","Modal","BackdropProps","invisible","open","disableAutoFocus","disableEnforceFocus","autoFocus","apiUrl","makeRequest","method","a","body","params","options","url","data","axios","response","makePostRequest","Map","accessToken","useState","latitude","longitude","zoom","viewport","setViewport","useDisclosure","mapRef","useRef","handleViewportChange","useCallback","newViewport","handleGeocoderViewportChange","transitionDuration","bestTimesData","apiTest","api_key_private","venue_address","venue_name","analysis","quiet_hours","console","log","test2","current","cachedResult","place_name","slice","indexOf","substring","position","onClick","ref","mapboxApiAccessToken","mapStyle","onViewportChange","onTransitionEnd","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1811271.chunk.js","sourcesContent":["import { Modal ,Box} from '@material-ui/core';\nimport { styled } from '@material-ui/core/styles';\n\nconst LocationInfo = ({isOpen, onOpen, onClose, locationAddress, locationName, bestTimeData}) => {\n  \n  const LocationModal = styled(Box)({\n    width: 300,\n    height: 300,\n    background: 'white',\n    outline: 'none',\n    marginTop: '150px',\n    marginLeft: '20px',\n    display: 'flex',\n    alignItems: 'center',\n    textAlign: 'center',\n  });\n\n\nreturn (\n  <Modal\n  BackdropProps={{ invisible: true }}\n  open={isOpen}\n  disableAutoFocus={true}\n  disableEnforceFocus\n  onClose={onClose}\n>\n  <LocationModal autoFocus={false}>{locationName}{locationAddress}{bestTimeData}</LocationModal>\n</Modal>\n);\n};\n\nexport default LocationInfo;","import axios from 'axios';\n\nconst apiUrl =\n  'https://besttime.app/api/v1/forecasts';\n\nconst makeRequest = async (method, body = {}, params = {}) => {\n  const options = {\n    method: method,\n    url: `${apiUrl}`,\n    data: body,\n    params: params,\n  };\n\n  const response = await axios(options);\n  return response;\n};\n\nconst makeGetRequest = async () => {\n  return makeRequest('get');\n};\n\nconst makePostRequest = async (params = {}) => {\n  return makeRequest('post',\"\", params);\n};\n\n\n\nexport { makeGetRequest, makePostRequest };\n","import React, { useState, useRef, useCallback } from 'react';\nimport ReactMapGL from 'react-map-gl';\nimport Geocoder from 'react-map-gl-geocoder';\nimport { Box} from '@material-ui/core';\nimport {useDisclosure, Button} from '@chakra-ui/react';\nimport LocationInfo from \"./LocationInfo\"\nimport {makePostRequest} from '../utils/api/besttime'; \n\nconst Map = () => {\n  const accessToken =\n    'pk.eyJ1Ijoia2FyaW4ta2F6YXJpYW4iLCJhIjoiY2tteWVjMnFpMDM4MTJubWYycTJ5N3Q5ZCJ9.Of9brpnQ8Oc-LGZ6P1ArrA';\n  const [viewport, setViewport] = useState({\n    latitude: 45.537875,\n    longitude: -73.757928,\n    zoom: 8,\n  });\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const mapRef = useRef();\n\n  const handleViewportChange = useCallback(\n    (newViewport) => setViewport(newViewport),\n    []\n  );\n\n  const handleGeocoderViewportChange = useCallback(\n    (newViewport) => {\n      const geocoderDefaultOverrides = { transitionDuration: 1000 };\n      return handleViewportChange({\n        ...newViewport,\n        ...geocoderDefaultOverrides,\n      });\n    },\n    [handleViewportChange]\n  );\n  let bestTimesData = \"\";\n\n  \nconst apiTest = async() => {\n  const response = await makePostRequest({\n    api_key_private:\"pri_7b5f18965b7d46a5b708eeee58fc2354\",\n    venue_address: locationAddress,\n    venue_name: locationName\n  });\n  bestTimesData = response?.data?.analysis?.[0]?.quiet_hours;\n  console.log('Quiet Hours: ', response?.data?.quiet_hours);\n  console.log('json response: ', response);\n  console.log('json data: ', response?.data);\n  console.log('json analysis: ', response?.data?.analysis);\n  console.log('json array 0: ', response?.data?.analysis?.[0]);\n  console.log('json quiet hours: ', response?.data?.analysis?.[0]?.quiet_hours);\n  onOpen();\n}\n const test2 = useRef(\"\");\n const locationName = test2?.current?.cachedResult?.place_name.slice(0, test2?.current?.cachedResult?.place_name.indexOf(','));\n const locationAddress = test2?.current?.cachedResult?.place_name.substring(test2?.current?.cachedResult?.place_name.indexOf(\",\")+1);\n//  console.log(\"Location:\", locationName);\n//  console.log(\"Location Address:\", locationAddress);\n\n  return (\n    <Box height=\"100%\" width=\"100%\" position=\"absolute\">\n              <Button onClick={apiTest} >Get Busy Data</Button>\n      <ReactMapGL\n        ref={mapRef}\n        {...viewport}\n        width=\"100%\"\n        height=\"100%\"\n        position=\"absolute\"\n        mapboxApiAccessToken={accessToken}\n        mapStyle=\"mapbox://styles/karin-kazarian/ckmyepr931r7317prtkdbrhj1\"\n        onViewportChange={handleViewportChange}\n        onTransitionEnd={apiTest}\n      >\n        <Geocoder\n          mapRef={mapRef}\n          ref={test2}\n          onViewportChange={handleGeocoderViewportChange}\n          mapboxApiAccessToken={accessToken}\n          width=\"100%\"\n          position=\"top-left\"\n        />\n      </ReactMapGL>\n      <div>\n        <LocationInfo isOpen={isOpen} onOpen={onOpen} onClose={onClose} locationAddress={locationAddress} locationName={locationName} bestTimeData = {bestTimesData}/>\n\n      </div> \n    </Box>\n  );\n};\n\nexport default Map;\n","import Map from './components/Map.jsx';\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <h1>Traffic App</h1>\n      <Map />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}