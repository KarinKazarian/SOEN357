{"version":3,"sources":["hooks/useWindowSize.jsx","components/LiveChart.jsx","constants.js","components/BusyHoursChart.jsx","components/LocationInfo.jsx","components/Map.jsx","images/logo.png","components/AppHeading.jsx","App.js","theme.js","index.js"],"names":["useWindowSize","useState","width","undefined","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","LiveChart","data","ResponsiveContainer","aspect","RadialBarChart","cx","cy","innerRadius","outerRadius","barSize","startAngle","endAngle","PolarAngleAxis","type","domain","angleAxisId","tick","RadialBar","background","clockWise","dataKey","cornerRadius","fill","x","y","textAnchor","dominantBaseline","className","live","weekDays","StyledFormLabel","styled","MenuItem","BusyHoursChart","today","Date","getDay","day","setDay","dataForChart","setDataForChart","length","temp","i","push","hour","busyness","fontSize","focusBorderColor","placement","autoSelect","as","Button","bg","_focus","_hover","_active","size","ChevronDown","onClick","BarChart","CartesianGrid","strokeDasharray","XAxis","label","value","position","dy","YAxis","angle","dx","Tooltip","Legend","verticalAlign","Bar","StyledBox","Box","LocationInfo","liveData","buynessData","liveDataArray","buynessDataArray","setBuynessDataArray","map","day_info","day_int","day_raw","spacing","paddingBottom","paddingRight","Map","accessToken","latitude","longitude","zoom","viewport","setViewport","mapRef","useRef","geocoderContainerRef","handleViewportChange","useToast","useCallback","newViewport","handleGeocoderViewportChange","transitionDuration","requestData","results","a","getParams","locationName","locationAddress","placeName","result","place_name","slice","indexOf","substring","console","log","alignSelf","w","resize","overflow","h","ref","style","display","alignItems","paddingLeft","day_rank_max","day_rank_mean","day_text","venue_closed","venue_open","hour_analysis","intensity_nr","intensity_txt","peak_hours","peak_start","peak_max","peak_end","peak_intensity","quiet_hours","busy_hours","surge_hours","most_people_come","most_people_leave","mapboxApiAccessToken","mapStyle","onViewportChange","containerRef","onResult","StyledHeading","Heading","StyledHeadingWrapper","Center","AppHeading","src","Logo","alt","App","breakpoints","createBreakpoints","sm","md","lg","xl","theme","extendTheme","colors","black","blue","50","100","200","300","400","500","600","700","800","900","green","fonts","mono","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","resetCSS","document","getElementById"],"mappings":"sSA0BeA,I,UAAAA,EAxBf,WAA0B,IAAD,EACaC,mBAAS,CAC3CC,WAAOC,EACPC,YAAQD,IAHa,mBAChBE,EADgB,KACJC,EADI,KAqBvB,OAfAC,qBAAU,WACR,SAASC,IACPF,EAAc,CACZJ,MAAOO,OAAOC,WACdN,OAAQK,OAAOE,cAQnB,OAJAF,OAAOG,iBAAiB,SAAUJ,GAElCA,IAEO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IAEIH,G,2CC6BMS,EA5CG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACbV,EAAaL,IAEnB,OACE,mCACE,cAACgB,EAAA,EAAD,CAAqBd,MAAM,MAAME,OAAO,MAAMa,OAAQ,IAAtD,SACE,eAACC,EAAA,EAAD,CACEC,GAAG,MACHC,GAAG,MACHC,YAAY,MACZC,YAAY,OACZC,QAAS,EACTR,KAAMA,EACNS,WAAY,IACZC,UAAW,GARb,UAUE,cAACC,EAAA,EAAD,CACEC,KAAK,SACLC,OAAQ,CAAC,EAAG,KACZC,YAAa,EACbC,MAAM,IAER,cAACC,EAAA,EAAD,CACEC,YAAU,EACVC,WAAS,EACTC,QAAQ,OACRC,aAAc9B,EAAWH,MAAQ,EACjCkC,KAAK,YAEP,uBACEC,EAAE,MACFC,EAAE,MACFC,WAAW,SACXC,iBAAiB,SACjBC,UAAU,iBALZ,UAOG1B,EAAK,GAAG2B,KAPX,e,mGCrCGC,EAAW,CACtB,SACA,UACA,YACA,WACA,SACA,WACA,UCkBIC,EAAkBC,YAAOC,IAAPD,CAAH,8EAiGNE,EA3FQ,SAAC,GAAc,IAAZhC,EAAW,EAAXA,KAAW,EAKbd,oBAJL,WACf,IAAM+C,GAAQ,IAAIC,MAAOC,SACzB,OAAgB,GAATF,EAAa,EAAIA,EAAQ,KAHC,mBAK5BG,EAL4B,KAKvBC,EALuB,OAMKnD,qBANL,mBAM5BoD,EAN4B,KAMdC,EANc,KAoBnC,OAZA/C,qBAAU,WACR,GAAY,MAARQ,GAAgC,IAAhBA,EAAKwC,QAA6B,MAAbxC,EAAKoC,GAAc,CAE1D,IADA,IAAIK,EAAO,GACFC,EAAI,EAAGA,EAAI1C,EAAKoC,GAAKI,OAAQE,IACpCD,EAAKE,KAAK,CAAEC,KAAMF,EAAGG,SAAU7C,EAAKoC,GAAKM,KAE3CH,EAAgBE,QAEhBF,EAAgB,MAEjB,CAACH,IAGF,qCACE,eAAC,IAAD,CAAQ/C,OAAO,OAAf,UACE,cAAC,IAAD,IACA,cAAC,IAAD,CAAMyD,SAAS,KAAf,SAAqBlB,EAASQ,KAE9B,cAAC,IAAD,IACA,eAAC,IAAD,CAAMW,iBAAiB,UAAUC,UAAU,OAAOC,YAAY,EAA9D,UACE,cAAC,IAAD,CACEC,GAAIC,IACJC,GAAG,UACHC,OAAQ,CAAED,GAAI,WACdE,OAAQ,CAAEF,GAAI,WACdG,QAAS,CAAEH,GAAI,WACfI,KAAK,KANP,SAQE,cAACC,EAAA,EAAD,MAEF,eAAC,IAAD,WACE,cAAC5B,EAAD,CAAiB6B,QAAS,kBAAMrB,EAAO,IAAvC,SACGT,EAAS,KAEZ,cAACC,EAAD,CAAiB6B,QAAS,kBAAMrB,EAAO,IAAvC,SACGT,EAAS,KAEZ,cAACC,EAAD,CAAiB6B,QAAS,kBAAMrB,EAAO,IAAvC,SACGT,EAAS,KAEZ,cAACC,EAAD,CAAiB6B,QAAS,kBAAMrB,EAAO,IAAvC,SACGT,EAAS,KAEZ,cAACC,EAAD,CAAiB6B,QAAS,kBAAMrB,EAAO,IAAvC,SACGT,EAAS,KAEZ,cAACC,EAAD,CAAiB6B,QAAS,kBAAMrB,EAAO,IAAvC,SACGT,EAAS,KAEZ,cAACC,EAAD,CAAiB6B,QAAS,kBAAMrB,EAAO,IAAvC,SACGT,EAAS,cAKlB,cAAC3B,EAAA,EAAD,CAAqBd,MAAM,OAAOE,OAAO,MAAMa,OAAQ,EAAvD,SACE,eAACyD,EAAA,EAAD,CAAUxE,MAAO,IAAKE,OAAQ,IAAKW,KAAMsC,EAAzC,UACE,cAACsB,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CACE3C,QAAQ,OACR4C,MAAO,CACLC,MAAO,OACPC,SAAU,eACVC,GAAI,MAGR,cAACC,EAAA,EAAD,CACEJ,MAAO,CACLC,MAAO,aACPI,OAAQ,GACRH,SAAU,iBACVI,IAAK,MAGT,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAQC,cAAc,QACtB,cAACC,EAAA,EAAD,CAAKtD,QAAQ,WAAWE,KAAK,qBC5GjCqD,EAAY5C,YAAO6C,IAAP7C,CAAH,mSA8CA8C,EApCM,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC1BC,EAAgB,CAAC,CAAEpD,KAAMkD,EAAUxD,KAAM,YADG,EAEFnC,mBAAS,IAFP,mBAE3C8F,EAF2C,KAEzBC,EAFyB,KAclD,OAVAzF,qBAAU,WACR,GAAmB,MAAfsF,GAA8C,IAAvBA,EAAYtC,OAAc,CACnD,IAAMC,EAAO,GACbqC,EAAYI,KAAI,SAAC9C,GACfK,EAAKL,EAAI+C,SAASC,SAAWhD,EAAIiD,WAEnCJ,EAAoBxC,MAErB,CAACqC,IAGF,mCACE,eAAC,IAAD,CAAQQ,QAAQ,OAAOjG,OAAO,MAA9B,UACE,eAACqF,EAAD,CAAWvF,MAAM,OAAjB,UACE,cAAC,IAAD,2BACA,cAAC,EAAD,CAAWa,KAAM+E,OAGnB,eAACL,EAAD,CAAWvF,MAAM,OAAOoG,cAAc,OAAOC,aAAa,OAA1D,UACE,cAAC,IAAD,yBACA,cAAC,EAAD,CAAgBxF,KAAMgF,OAExB,cAACL,EAAA,EAAD,UACE,eAAC,IAAD,CAAM7B,SAAS,KAAf,8BACmB,cAAC,IAAD,+CCnCvB4B,G,OAAY5C,YAAO6C,IAAP7C,CAAH,oSA2SA2D,EAjSH,WACV,IAAMnG,EAAaL,IA2HbyG,EACJ,qGA7Hc,EA+HgBxG,mBAAS,CACvCyG,SAAU,WACVC,WAAY,UACZC,KAAM,IAlIQ,mBA+HTC,EA/HS,KA+HCC,EA/HD,OAqIgB7G,mBAAS,GArIzB,mBAqIT2F,EArIS,aAsIsB3F,mBAAS,KAtI/B,mBAuIV8G,GAvIU,UAuIDC,oBACTC,EAAuBD,mBAGvBE,GAFQC,cAEeC,uBAC3B,SAACC,GAAD,OAAiBP,EAAYO,KAC7B,KAGIC,EAA+BF,uBACnC,SAACC,GAEC,OAAOH,EAAqB,2BACvBG,GAF4B,CAAEE,mBAAoB,SAMzD,CAACL,IAsDGM,EAAW,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,2DACsBC,EAAUF,GADhC,mBACXG,EADW,KACGC,EADH,KAEbD,GAAiBC,EAFJ,qFAAH,sDAOXF,EAAY,SAACF,GACjB,IAAMK,EAAYL,EAAQM,OAAOC,WACjC,GAAiB,MAAbF,EAAmB,CACrB,IAAMF,EAAeE,EAAUG,MAAM,EAAGH,EAAUI,QAAQ,MACpDL,EAAkBC,EAAUK,UAAUL,EAAUI,QAAQ,KAAO,GAErE,OADAE,QAAQC,IAAI,aACL,CAACT,EAAcC,GAGxB,OADAO,QAAQC,IAAI,iBACL,CAAC,GAAI,KAGd,OACE,mCACE,eAAC,IAAD,CAAQhC,QAAQ,MAAhB,UACE,eAAC,EAAD,CACEiC,UAAU,WACVC,EAAE,MACFC,OAAO,aACPC,SAAS,SACTC,EAAGrI,EAAWD,OAAS,GALzB,UAOE,cAAC,IAAD,UACE,qBACEuI,IAAK1B,EACL2B,MAAO,CACLxI,OAAQ,GACRyI,QAAS,OACTC,WAAY,SACZC,YAAa,OAInB,cAAC,EAAD,CAAcnD,SAAUA,EAAUC,YApPzB,CACf,CACEK,SAAU,CACRC,QAAS,EACT6C,aAAc,EACdC,cAAe,EACfC,SAAU,SACVC,aAAc,EACdC,WAAY,IAEdhD,QAAS,CACP,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,GAEFiD,cAAe,CACb,CACE1F,KAAM,EACN2F,cAAe,EACfC,cAAe,kBAGnBC,WAAY,CACV,CACEC,WAAY,EACZC,SAAU,GACVC,SAAU,GACVC,eAAgB,IAGpBC,YAAa,CAAC,EAAG,EAAG,EAAG,GACvBC,WAAY,CAAC,EAAG,GAAI,GAAI,IACxBC,YAAa,CACXC,iBAAkB,EAClBC,kBAAmB,KAGvB,CACE/D,SAAU,CACRC,QAAS,EACT6C,aAAc,EACdC,cAAe,EACfC,SAAU,SACVC,aAAc,EACdC,WAAY,IAEdhD,QAAS,CACP,GACA,IACA,IACA,GACA,GACA,EACA,GACA,EACA,GACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,GAEFiD,cAAe,CACb,CACE1F,KAAM,EACN2F,cAAe,EACfC,cAAe,kBAGnBC,WAAY,CACV,CACEC,WAAY,EACZC,SAAU,GACVC,SAAU,GACVC,eAAgB,IAGpBC,YAAa,CAAC,EAAG,EAAG,EAAG,GACvBC,WAAY,CAAC,EAAG,GAAI,GAAI,IACxBC,YAAa,CACXC,iBAAkB,EAClBC,kBAAmB,WAuInB,cAAC,IAAD,CAAK1B,EAAE,MAAMG,EAAGrI,EAAWD,OAAS,GAApC,SACE,cAAC,IAAD,yBACEuI,IAAK5B,GACDF,GAFN,IAGEzG,OAAO,OACPF,MAAM,OACNgK,qBAAsBzD,EACtB0D,SAAS,2DACTC,iBAAkBlD,EAPpB,SAUE,cAAC,IAAD,CACEH,OAAQA,EACRsD,aAAcpD,EACdmD,iBAAkB9C,EAClB4C,qBAAsBzD,EACtB6D,SAAU9C,e,mBC7RT,OAA0B,iCCKnC+C,GAAgB1H,YAAO2H,IAAP3H,CAAH,wXAeb4H,GAAuB5H,YAAO6H,IAAP7H,CAAH,qRAqBX8H,GAZI,WACjB,IAAMtK,EAAaL,IACnB,OACE,mCACE,eAACyK,GAAD,CAAsBrK,OAA4B,IAApBC,EAAWD,OAAzC,UACE,cAACmK,GAAD,0BACA,cAAC,KAAD,CAAOK,IAAKC,GAAMC,IAAI,YAAY1K,OAAQ,aCrBnC2K,GAVH,WACV,OACE,sBAAKtI,UAAU,MAAf,UACE,cAAC,GAAD,IACA,cAAC,IAAD,IACA,cAAC,EAAD,Q,8BCJAuI,GAAcC,aAAkB,CACpCC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,SAqCSC,GAlCDC,aAAY,CACxBC,OAAQ,CACNC,MAAO,UACPC,KAAM,CACJC,GAAI,UACJC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,WAEPC,MAAO,CACLV,GAAI,UACJC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,YAGTE,MArCY,CAAEC,KAAK,sBAsCnBvB,eACAwB,iBAAkB,QAClBC,oBAAoB,ICrCtBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,KAAD,CAAgBC,UAAQ,EAACvB,MAAOA,GAAhC,SACE,cAAC,GAAD,QAGJwB,SAASC,eAAe,W","file":"static/js/main.169dc76d.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nfunction useWindowSize() {\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    handleResize();\r\n\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowSize;\r\n}\r\n\r\nexport default useWindowSize;\r\n","import useWindowSize from '../hooks/useWindowSize';\r\nimport {\r\n  RadialBar,\r\n  PolarAngleAxis,\r\n  RadialBarChart,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\n\r\nconst LiveChart = ({ data }) => {\r\n  const windowSize = useWindowSize();\r\n\r\n  return (\r\n    <>\r\n      <ResponsiveContainer width='70%' height='70%' aspect={1.5}>\r\n        <RadialBarChart\r\n          cx='70%'\r\n          cy='50%'\r\n          innerRadius='90%'\r\n          outerRadius='100%'\r\n          barSize={3}\r\n          data={data}\r\n          startAngle={230}\r\n          endAngle={-50}\r\n        >\r\n          <PolarAngleAxis\r\n            type='number'\r\n            domain={[0, 100]}\r\n            angleAxisId={0}\r\n            tick={false}\r\n          />\r\n          <RadialBar\r\n            background\r\n            clockWise\r\n            dataKey='live'\r\n            cornerRadius={windowSize.width / 8}\r\n            fill='#82ca9d'\r\n          />\r\n          <text\r\n            x='70%'\r\n            y='50%'\r\n            textAnchor='middle'\r\n            dominantBaseline='middle'\r\n            className='progress-label'\r\n          >\r\n            {data[0].live}%\r\n          </text>\r\n        </RadialBarChart>\r\n      </ResponsiveContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LiveChart;\r\n","export const weekDays = [\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday',\r\n  'Sunday',\r\n];\r\n","import {\r\n  Bar,\r\n  BarChart,\r\n  CartesianGrid,\r\n  Legend,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nimport {\r\n  Button,\r\n  Text,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  Divider,\r\n  Center,\r\n} from '@chakra-ui/react';\r\nimport { ChevronDownIcon } from '@chakra-ui/icons';\r\nimport styled from '@emotion/styled';\r\nimport { useState, useEffect } from 'react';\r\nimport { weekDays } from '../constants';\r\n\r\nconst StyledFormLabel = styled(MenuItem)`\r\n  &:hover {\r\n    background-color: #bdb3f7;\r\n  }\r\n`;\r\n\r\nconst BusyHoursChart = ({ data }) => {\r\n  const getToday = () => {\r\n    const today = new Date().getDay();\r\n    return today == 0 ? 6 : today - 1;\r\n  };\r\n  const [day, setDay] = useState(getToday);\r\n  const [dataForChart, setDataForChart] = useState();\r\n\r\n  useEffect(() => {\r\n    if (data != null && data.length !== 0 && data[day] != null) {\r\n      let temp = [];\r\n      for (let i = 0; i < data[day].length; i++) {\r\n        temp.push({ hour: i, busyness: data[day][i] });\r\n      }\r\n      setDataForChart(temp);\r\n    } else {\r\n      setDataForChart([]);\r\n    }\r\n  }, [day]);\r\n\r\n  return (\r\n    <>\r\n      <Center height='50px'>\r\n        <Divider />\r\n        <Text fontSize='sm'>{weekDays[day]}</Text>\r\n\r\n        <Divider />\r\n        <Menu focusBorderColor='#8070da' placement='left' autoSelect={false}>\r\n          <MenuButton\r\n            as={Button}\r\n            bg='#ffffff'\r\n            _focus={{ bg: '#ffffff' }}\r\n            _hover={{ bg: '#ffffff' }}\r\n            _active={{ bg: '#ffffff' }}\r\n            size='xs'\r\n          >\r\n            <ChevronDownIcon />\r\n          </MenuButton>\r\n          <MenuList>\r\n            <StyledFormLabel onClick={() => setDay(0)}>\r\n              {weekDays[0]}\r\n            </StyledFormLabel>\r\n            <StyledFormLabel onClick={() => setDay(1)}>\r\n              {weekDays[1]}\r\n            </StyledFormLabel>\r\n            <StyledFormLabel onClick={() => setDay(2)}>\r\n              {weekDays[2]}\r\n            </StyledFormLabel>\r\n            <StyledFormLabel onClick={() => setDay(3)}>\r\n              {weekDays[3]}\r\n            </StyledFormLabel>\r\n            <StyledFormLabel onClick={() => setDay(4)}>\r\n              {weekDays[4]}\r\n            </StyledFormLabel>\r\n            <StyledFormLabel onClick={() => setDay(5)}>\r\n              {weekDays[5]}\r\n            </StyledFormLabel>\r\n            <StyledFormLabel onClick={() => setDay(6)}>\r\n              {weekDays[6]}\r\n            </StyledFormLabel>\r\n          </MenuList>\r\n        </Menu>\r\n      </Center>\r\n      <ResponsiveContainer width='100%' height='90%' aspect={2}>\r\n        <BarChart width={500} height={400} data={dataForChart}>\r\n          <CartesianGrid strokeDasharray='3 3' />\r\n          <XAxis\r\n            dataKey='hour'\r\n            label={{\r\n              value: 'Hour',\r\n              position: 'insideBottom',\r\n              dy: 10,\r\n            }}\r\n          />\r\n          <YAxis\r\n            label={{\r\n              value: 'Percentage',\r\n              angle: -90,\r\n              position: 'insideRightTop',\r\n              dx: -10,\r\n            }}\r\n          />\r\n          <Tooltip />\r\n          <Legend verticalAlign='top' />\r\n          <Bar dataKey='busyness' fill='#8070da' />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BusyHoursChart;\r\n","import { Box } from '@material-ui/core';\r\nimport { VStack, Center, Link, Text } from '@chakra-ui/react';\r\nimport styled from '@emotion/styled';\r\nimport React, { useState, useEffect } from 'react';\r\nimport LiveChart from './LiveChart';\r\nimport BusyHoursChart from './BusyHoursChart';\r\n\r\nconst StyledBox = styled(Box)`\r\n  background: rgba(255, 255, 255, 0.25);\r\n  box-shadow: 0 8px 20px 0 rgba(31, 38, 135, 0.37);\r\n  backdrop-filter: blur(4px);\r\n  -webkit-backdrop-filter: blur(4px);\r\n  border-radius: 10px;\r\n  border: 1px solid rgba(255, 255, 255, 0.18);\r\n  display: inline-block;\r\n`;\r\n\r\nconst LocationInfo = ({ liveData, buynessData }) => {\r\n  const liveDataArray = [{ live: liveData, fill: '#8884d8' }];\r\n  const [buynessDataArray, setBuynessDataArray] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (buynessData != null && buynessData.length !== 0) {\r\n      const temp = [];\r\n      buynessData.map((day) => {\r\n        temp[day.day_info.day_int] = day.day_raw;\r\n      });\r\n      setBuynessDataArray(temp);\r\n    }\r\n  }, [buynessData]);\r\n\r\n  return (\r\n    <>\r\n      <VStack spacing='18px' height='50%'>\r\n        <StyledBox width='100%'>\r\n          <Center>Live Traffic</Center>\r\n          <LiveChart data={liveDataArray} />\r\n        </StyledBox>\r\n\r\n        <StyledBox width='100%' paddingBottom='20px' paddingRight='15px'>\r\n          <Center>Busy Hours</Center>\r\n          <BusyHoursChart data={buynessDataArray} />\r\n        </StyledBox>\r\n        <Box>\r\n          <Text fontSize='xs'>\r\n            Data Taken From: <Link>https://besttime.app/</Link>\r\n          </Text>\r\n        </Box>\r\n      </VStack>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LocationInfo;\r\n","import React, { useState, useRef, useCallback } from 'react';\r\nimport ReactMapGL, { Marker } from 'react-map-gl';\r\nimport Geocoder from 'react-map-gl-geocoder';\r\nimport { HStack, Box, useToast, Center } from '@chakra-ui/react';\r\nimport LocationInfo from './LocationInfo';\r\nimport { makePostRequest, makePostRequestLive } from '../utils/api/besttime';\r\nimport { FaWarehouse } from 'react-icons/fa';\r\nimport styled from '@emotion/styled';\r\nimport useWindowSize from '../hooks/useWindowSize';\r\n\r\nconst StyledBox = styled(Box)`\r\n  background: rgba(255, 255, 255, 0.25);\r\n  box-shadow: 0 8px 20px 0 rgba(31, 38, 135, 0.37);\r\n  backdrop-filter: blur(4px);\r\n  -webkit-backdrop-filter: blur(4px);\r\n  border-radius: 10px;\r\n  border: 1px solid rgba(255, 255, 255, 0.18);\r\n  display: inline-block;\r\n`;\r\n\r\nconst Map = () => {\r\n  const windowSize = useWindowSize();\r\n  const testData = [\r\n    {\r\n      day_info: {\r\n        day_int: 0,\r\n        day_rank_max: 6,\r\n        day_rank_mean: 4,\r\n        day_text: 'Monday',\r\n        venue_closed: 6,\r\n        venue_open: 23,\r\n      },\r\n      day_raw: [\r\n        10,\r\n        25,\r\n        40,\r\n        55,\r\n        65,\r\n        75,\r\n        75,\r\n        75,\r\n        75,\r\n        75,\r\n        70,\r\n        65,\r\n        50,\r\n        40,\r\n        30,\r\n        25,\r\n        25,\r\n        25,\r\n        20,\r\n        15,\r\n        10,\r\n        0,\r\n        5,\r\n        5,\r\n      ],\r\n      hour_analysis: [\r\n        {\r\n          hour: 6,\r\n          intensity_nr: -1,\r\n          intensity_txt: 'Below average',\r\n        },\r\n      ],\r\n      peak_hours: [\r\n        {\r\n          peak_start: 8,\r\n          peak_max: 11,\r\n          peak_end: 23,\r\n          peak_intensity: 4,\r\n        },\r\n      ],\r\n      quiet_hours: [6, 1, 2, 3],\r\n      busy_hours: [9, 10, 11, 12],\r\n      surge_hours: {\r\n        most_people_come: 8,\r\n        most_people_leave: 22,\r\n      },\r\n    },\r\n    {\r\n      day_info: {\r\n        day_int: 1,\r\n        day_rank_max: 6,\r\n        day_rank_mean: 4,\r\n        day_text: 'Monday',\r\n        venue_closed: 6,\r\n        venue_open: 23,\r\n      },\r\n      day_raw: [\r\n        30,\r\n        100,\r\n        100,\r\n        55,\r\n        65,\r\n        5,\r\n        35,\r\n        7,\r\n        45,\r\n        45,\r\n        60,\r\n        65,\r\n        0,\r\n        40,\r\n        30,\r\n        25,\r\n        25,\r\n        25,\r\n        20,\r\n        15,\r\n        10,\r\n        0,\r\n        5,\r\n        5,\r\n      ],\r\n      hour_analysis: [\r\n        {\r\n          hour: 6,\r\n          intensity_nr: -1,\r\n          intensity_txt: 'Below average',\r\n        },\r\n      ],\r\n      peak_hours: [\r\n        {\r\n          peak_start: 8,\r\n          peak_max: 11,\r\n          peak_end: 23,\r\n          peak_intensity: 4,\r\n        },\r\n      ],\r\n      quiet_hours: [6, 1, 2, 3],\r\n      busy_hours: [9, 10, 11, 12],\r\n      surge_hours: {\r\n        most_people_come: 8,\r\n        most_people_leave: 22,\r\n      },\r\n    },\r\n  ];\r\n\r\n  const hq = {\r\n    longitude: -73.745181,\r\n    latitude: 45.4644455,\r\n  };\r\n\r\n  const accessToken =\r\n    'pk.eyJ1Ijoia2FyaW4ta2F6YXJpYW4iLCJhIjoiY2tteWVjMnFpMDM4MTJubWYycTJ5N3Q5ZCJ9.Of9brpnQ8Oc-LGZ6P1ArrA';\r\n\r\n  const [viewport, setViewport] = useState({\r\n    latitude: 45.4644455,\r\n    longitude: -73.745181,\r\n    zoom: 8,\r\n  });\r\n\r\n  const [liveData, setLiveData] = useState(0);\r\n  const [buynessData, setBuynessData] = useState({});\r\n  const mapRef = useRef();\r\n  const geocoderContainerRef = useRef();\r\n  const toast = useToast();\r\n\r\n  const handleViewportChange = useCallback(\r\n    (newViewport) => setViewport(newViewport),\r\n    []\r\n  );\r\n\r\n  const handleGeocoderViewportChange = useCallback(\r\n    (newViewport) => {\r\n      const geocoderDefaultOverrides = { transitionDuration: 1000 };\r\n      return handleViewportChange({\r\n        ...newViewport,\r\n        ...geocoderDefaultOverrides,\r\n      });\r\n    },\r\n    [handleViewportChange]\r\n  );\r\n\r\n  const requestLiveData = async (locationName, locationAddress) => {\r\n    try {\r\n      var response = await makePostRequestLive({\r\n        api_key_private: 'pri_7b5f18965b7d46a5b708eeee58fc2354',\r\n        venue_address: locationAddress,\r\n        venue_name: locationName,\r\n      });\r\n      console.log('liveResponse: ', response);\r\n      if (response.data.status !== 'Error') {\r\n        const busyness = response?.data.analysis?.venue_live_busyness;\r\n        setLiveData(busyness);\r\n      } else {\r\n        throw response.data;\r\n      }\r\n    } catch (err) {\r\n      setLiveData(0);\r\n      toast({\r\n        title: 'Error',\r\n        description: err.message,\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  const requestBusynessData = async (locationName, locationAddress) => {\r\n    try {\r\n      const response = await makePostRequest({\r\n        api_key_private: 'pri_7b5f18965b7d46a5b708eeee58fc2354',\r\n        venue_address: locationAddress,\r\n        venue_name: locationName,\r\n      });\r\n      if (response.data.status !== 'Error') {\r\n        const rawData = response?.data?.analysis;\r\n        setBuynessData(rawData);\r\n      } else {\r\n        throw response.data;\r\n      }\r\n    } catch (err) {\r\n      setLiveData(0);\r\n      toast({\r\n        title: 'Error',\r\n        description: err.message,\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  const requestData = async (results) => {\r\n    const [locationName, locationAddress] = getParams(results);\r\n    if (!locationName || !locationAddress) return;\r\n    //requestBusynessData(locationName, locationAddress);\r\n    //requestLiveData(locationName, locationAddress);\r\n  };\r\n\r\n  const getParams = (results) => {\r\n    const placeName = results.result.place_name;\r\n    if (placeName != null) {\r\n      const locationName = placeName.slice(0, placeName.indexOf(','));\r\n      const locationAddress = placeName.substring(placeName.indexOf(',') + 1);\r\n      console.log('in the if');\r\n      return [locationName, locationAddress];\r\n    }\r\n    console.log('out of the if');\r\n    return ['', ''];\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <HStack spacing='5px'>\r\n        <StyledBox\r\n          alignSelf='baseline'\r\n          w='35%'\r\n          resize='horizontal'\r\n          overflow='scroll'\r\n          h={windowSize.height - 96}\r\n        >\r\n          <Center>\r\n            <div\r\n              ref={geocoderContainerRef}\r\n              style={{\r\n                height: 50,\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                paddingLeft: 4,\r\n              }}\r\n            />\r\n          </Center>\r\n          <LocationInfo liveData={liveData} buynessData={testData} />\r\n        </StyledBox>\r\n\r\n        <Box w='90%' h={windowSize.height - 96}>\r\n          <ReactMapGL\r\n            ref={mapRef}\r\n            {...viewport}\r\n            height='100%'\r\n            width='100%'\r\n            mapboxApiAccessToken={accessToken}\r\n            mapStyle='mapbox://styles/karin-kazarian/ckmyepr931r7317prtkdbrhj1'\r\n            onViewportChange={handleViewportChange}\r\n            //onTransitionEnd={apiTest}\r\n          >\r\n            <Geocoder\r\n              mapRef={mapRef}\r\n              containerRef={geocoderContainerRef}\r\n              onViewportChange={handleGeocoderViewportChange}\r\n              mapboxApiAccessToken={accessToken}\r\n              onResult={requestData}\r\n            />\r\n            {/* <Link\r\n              onClick={() => {\r\n                onToggle();\r\n                console.log('dead');\r\n              }}\r\n            >\r\n              <Marker\r\n                longitude={hq.longitude}\r\n                latitude={hq.latitude}\r\n                offsetLeft={-10}\r\n                offsetTop={-10}\r\n              >\r\n                <FaWarehouse />\r\n              </Marker>\r\n            </Link> */}\r\n          </ReactMapGL>\r\n        </Box>\r\n      </HStack>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","export default __webpack_public_path__ + \"static/media/logo.b6a5af5e.png\";","import { Heading, Center, Image } from '@chakra-ui/react';\r\nimport styled from '@emotion/styled';\r\nimport useWindowSize from '../hooks/useWindowSize';\r\nimport Logo from '../images/logo.png';\r\n\r\nconst StyledHeading = styled(Heading)`\r\n  font-family: Verdana, Geneva, sans-serif;\r\n  font-size: 27px;\r\n  letter-spacing: 3px;\r\n  word-spacing: 2px;\r\n  color: #000000;\r\n  font-weight: 400;\r\n  text-decoration: none;\r\n  font-style: normal;\r\n  font-variant: normal;\r\n  text-transform: uppercase;\r\n  text-shadow: -1px -1px 1px rgba(255, 255, 255, 0.1),\r\n    1px 1px 1px rgba(0, 0, 0, 0.5);\r\n`;\r\n\r\nconst StyledHeadingWrapper = styled(Center)`\r\n  margin-bottom: 10px;\r\n  padding: 40px;\r\n  background: rgba(235, 216, 247, 0.25);\r\n  background: rgba(255, 255, 255, 0.25);\r\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\r\n  backdrop-filter: blur(4px);\r\n  -webkit-backdrop-filter: blur(4px);\r\n`;\r\nconst AppHeading = () => {\r\n  const windowSize = useWindowSize();\r\n  return (\r\n    <>\r\n      <StyledHeadingWrapper height={windowSize.height * 0.03}>\r\n        <StyledHeading>Time Saver </StyledHeading>\r\n        <Image src={Logo} alt='time logo' height={43 * 1.5} />\r\n      </StyledHeadingWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppHeading;\r\n","import Map from './components/Map.jsx';\r\nimport { Divider } from '@chakra-ui/react';\r\nimport AppHeading from './components/AppHeading.jsx';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className='App'>\r\n      <AppHeading />\r\n      <Divider />\r\n      <Map />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { extendTheme } from '@chakra-ui/react';\r\nimport { createBreakpoints } from '@chakra-ui/theme-tools';\r\n\r\nconst fonts = { mono: `'Menlo', monospace` };\r\n\r\nconst breakpoints = createBreakpoints({\r\n  sm: '40em',\r\n  md: '52em',\r\n  lg: '64em',\r\n  xl: '80em',\r\n});\r\n\r\nconst theme = extendTheme({\r\n  colors: {\r\n    black: '#16161D',\r\n    blue: {\r\n      50: '#dcf3ff',\r\n      100: '#aed7ff',\r\n      200: '#7dbdff',\r\n      300: '#4aa2ff',\r\n      400: '#1a87ff',\r\n      500: '#006ee6',\r\n      600: '#0055b4',\r\n      700: '#003d82',\r\n      800: '#002551',\r\n      900: '#000d21',\r\n    },\r\n    green: {\r\n      50: '#e4fced',\r\n      100: '#c2edd4',\r\n      200: '#9edfb9',\r\n      300: '#79d29e',\r\n      400: '#55c684',\r\n      500: '#3bac6a',\r\n      600: '#2d8652',\r\n      700: '#1e6039',\r\n      800: '#0e3a21',\r\n      900: '#001507',\r\n    },\r\n  },\r\n  fonts,\r\n  breakpoints,\r\n  initialColorMode: 'light',\r\n  useSystemColorMode: false,\r\n});\r\n\r\nexport default theme;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport theme from './theme.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider resetCSS theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}